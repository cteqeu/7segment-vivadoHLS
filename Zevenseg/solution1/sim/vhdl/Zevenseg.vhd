-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Zevenseg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sw : IN STD_LOGIC;
    led_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    led_V_ap_vld : OUT STD_LOGIC;
    display_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    display_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Zevenseg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Zevenseg,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.998000,HLS_SYN_LAT=100000003,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=533}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv31_F : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_19 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_12 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_E : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_21 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_const_lv27_5F5E100 : STD_LOGIC_VECTOR (26 downto 0) := "101111101011110000100000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal value_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal value_assign_fu_207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_assign_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_221_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_483 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_i_fu_358_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_i_reg_488 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_22_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_i_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_display_i_fu_444_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal value_display_i_reg_526 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_458_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_126 : STD_LOGIC_VECTOR (26 downto 0);
    signal exitcond_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_147_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_171_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_cast_fu_181_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_1_fu_195_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal value_assign_fu_207_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_163_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_cast_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_248_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_i_fu_230_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_i_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_i_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_cast_cast_fu_280_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_i_fu_262_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_i_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_cast_cast_fu_312_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_i_fu_294_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_i_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_cast_cast_fu_344_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_i_fu_326_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_i_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_cast_cast_fu_396_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_i_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_fu_414_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_i_fu_407_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_i_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_cast_cast_fu_433_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_i_fu_425_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond_fu_452_p2 = ap_const_lv1_0))) then 
                i_reg_126 <= i_1_fu_458_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i_reg_126 <= ap_const_lv27_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                tmp_21_i_reg_488 <= tmp_21_i_fu_358_p3;
                tmp_22_i_reg_493 <= tmp_22_i_fu_366_p2;
                tmp_23_i_reg_498 <= tmp_23_i_fu_371_p2;
                tmp_27_i_reg_504 <= tmp_27_i_fu_376_p2;
                tmp_28_i_reg_509 <= tmp_28_i_fu_381_p2;
                tmp_32_i_reg_515 <= tmp_32_i_fu_386_p2;
                tmp_33_i_reg_520 <= tmp_33_i_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_5_reg_483 <= tmp_5_fu_221_p1;
                value_assign_reg_464 <= value_assign_fu_207_p3;
                value_r <= value_assign_fu_207_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                value_display_i_reg_526 <= value_display_i_fu_444_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_452_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (not((exitcond_fu_452_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_452_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((exitcond_fu_452_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_452_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((exitcond_fu_452_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    display_V <= value_display_i_reg_526;

    display_V_ap_vld_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_452_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond_fu_452_p2 = ap_const_lv1_0))) then 
            display_V_ap_vld <= ap_const_logic_1;
        else 
            display_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_452_p2 <= "1" when (i_reg_126 = ap_const_lv27_5F5E100) else "0";
    i_1_fu_458_p2 <= std_logic_vector(unsigned(i_reg_126) + unsigned(ap_const_lv27_1));
    icmp_fu_157_p2 <= "1" when (signed(tmp_1_fu_147_p4) > signed(ap_const_lv28_0)) else "0";
    led_V <= tmp_5_reg_483;

    led_V_ap_vld_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_452_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond_fu_452_p2 = ap_const_lv1_0))) then 
            led_V_ap_vld <= ap_const_logic_1;
        else 
            led_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_1_cast_fu_203_p1 <= std_logic_vector(resize(unsigned(p_1_fu_195_p3),32));
    p_1_fu_195_p3 <= 
        ap_const_lv31_F when (tmp_4_fu_187_p3(0) = '1') else 
        tmp_2_cast_fu_181_p2;
    p_s_fu_163_p3 <= 
        ap_const_lv32_0 when (icmp_fu_157_p2(0) = '1') else 
        tmp_fu_141_p2;
    tmp_10_i_fu_288_p2 <= (tmp_8_i_fu_275_p2 or tmp_7_i_fu_270_p2);
    tmp_11_i_fu_294_p3 <= 
        tmp_9_i_cast_cast_fu_280_p3 when (tmp_10_i_fu_288_p2(0) = '1') else 
        tmp_6_i_fu_262_p3;
    tmp_12_i_fu_302_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_5) else "0";
    tmp_13_i_fu_307_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_6) else "0";
    tmp_14_i_cast_cast_fu_312_p3 <= 
        ap_const_lv7_2 when (tmp_13_i_fu_307_p2(0) = '1') else 
        ap_const_lv7_12;
    tmp_15_i_fu_320_p2 <= (tmp_13_i_fu_307_p2 or tmp_12_i_fu_302_p2);
    tmp_16_i_fu_326_p3 <= 
        tmp_14_i_cast_cast_fu_312_p3 when (tmp_15_i_fu_320_p2(0) = '1') else 
        tmp_11_i_fu_294_p3;
    tmp_17_i_fu_334_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_7) else "0";
    tmp_18_i_fu_339_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_F) else "0";
    tmp_19_i_cast_cast_fu_344_p3 <= 
        ap_const_lv7_E when (tmp_18_i_fu_339_p2(0) = '1') else 
        ap_const_lv7_78;
    tmp_1_fu_147_p4 <= tmp_fu_141_p2(31 downto 4);
    tmp_1_i_fu_230_p3 <= 
        ap_const_lv7_40 when (tmp_i_fu_225_p2(0) = '1') else 
        ap_const_lv7_0;
    tmp_20_i_fu_352_p2 <= (tmp_18_i_fu_339_p2 or tmp_17_i_fu_334_p2);
    tmp_21_i_fu_358_p3 <= 
        tmp_19_i_cast_cast_fu_344_p3 when (tmp_20_i_fu_352_p2(0) = '1') else 
        tmp_16_i_fu_326_p3;
    tmp_22_i_fu_366_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_9) else "0";
    tmp_23_i_fu_371_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_A) else "0";
    tmp_24_i_cast_cast_fu_396_p3 <= 
        ap_const_lv7_8 when (tmp_23_i_reg_498(0) = '1') else 
        ap_const_lv7_10;
    tmp_25_i_fu_403_p2 <= (tmp_23_i_reg_498 or tmp_22_i_reg_493);
    tmp_26_i_fu_407_p3 <= 
        tmp_24_i_cast_cast_fu_396_p3 when (tmp_25_i_fu_403_p2(0) = '1') else 
        tmp_21_i_reg_488;
    tmp_27_i_fu_376_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_B) else "0";
    tmp_28_i_fu_381_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_C) else "0";
    tmp_29_i_fu_414_p3 <= 
        ap_const_lv7_46 when (tmp_28_i_reg_509(0) = '1') else 
        ap_const_lv7_3;
    tmp_2_cast_fu_181_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(tmp_3_fu_171_p1));
    tmp_2_fu_175_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(value_r));
    tmp_2_i_fu_238_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_1) else "0";
    tmp_30_i_fu_421_p2 <= (tmp_28_i_reg_509 or tmp_27_i_reg_504);
    tmp_31_i_fu_425_p3 <= 
        tmp_29_i_fu_414_p3 when (tmp_30_i_fu_421_p2(0) = '1') else 
        tmp_26_i_fu_407_p3;
    tmp_32_i_fu_386_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_D) else "0";
    tmp_33_i_fu_391_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_E) else "0";
    tmp_34_i_cast_cast_fu_433_p3 <= 
        ap_const_lv7_6 when (tmp_33_i_reg_520(0) = '1') else 
        ap_const_lv7_21;
    tmp_35_i_fu_440_p2 <= (tmp_33_i_reg_520 or tmp_32_i_reg_515);
    tmp_3_fu_171_p1 <= value_r(31 - 1 downto 0);
    tmp_3_i_fu_243_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_2) else "0";
    tmp_4_fu_187_p3 <= tmp_2_fu_175_p2(31 downto 31);
    tmp_4_i_fu_248_p3 <= 
        ap_const_lv7_24 when (tmp_3_i_fu_243_p2(0) = '1') else 
        ap_const_lv7_79;
    tmp_5_fu_221_p1 <= value_assign_fu_207_p3(4 - 1 downto 0);
    tmp_5_i_fu_256_p2 <= (tmp_3_i_fu_243_p2 or tmp_2_i_fu_238_p2);
    tmp_6_i_fu_262_p3 <= 
        tmp_4_i_fu_248_p3 when (tmp_5_i_fu_256_p2(0) = '1') else 
        tmp_1_i_fu_230_p3;
    tmp_7_i_fu_270_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_3) else "0";
    tmp_8_i_fu_275_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_4) else "0";
    tmp_9_i_cast_cast_fu_280_p3 <= 
        ap_const_lv7_19 when (tmp_8_i_fu_275_p2(0) = '1') else 
        ap_const_lv7_30;
    tmp_fu_141_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(value_r));
    tmp_i_fu_225_p2 <= "1" when (value_assign_reg_464 = ap_const_lv32_0) else "0";
    value_assign_fu_207_p0 <= (0=>sw, others=>'-');
    value_assign_fu_207_p3 <= 
        p_s_fu_163_p3 when (value_assign_fu_207_p0(0) = '1') else 
        p_1_cast_fu_203_p1;
    value_display_i_fu_444_p3 <= 
        tmp_34_i_cast_cast_fu_433_p3 when (tmp_35_i_fu_440_p2(0) = '1') else 
        tmp_31_i_fu_425_p3;
end behav;
